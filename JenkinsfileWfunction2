import groovy.json.JsonSlurper
def invokeSmoke(ENVIRONMENTparam,SMOKE_SERVERparam) {
            jenkinsURL = "35.168.32.83:8080"
            jobName = "getBuildNumber"
            user = "admin"
            jenkinsToken = "11913b5a828895141297ffbb5fca801565"
             ENVIRONMENT = env.ENVIRONMENT
             SMOKE_SERVER = env.SMOKE_SERVER
             urlPrefix = "http://${jenkinsURL}/job/${jobName}"
             auth = "--user ${user}:$jenkinsToken"

             previousBuild = sh(script: "curl -s ${urlPrefix}/lastBuild/buildNumber ${auth}", returnStdout: true).trim() as Integer
            println("previousBuildNumber = ${previousBuild}")
             currentBuild = previousBuild + 1
	    //def currentBuildString = sh ("${currentBuild}").trim() as String
	    //println("surrent String : ${currentBuildString}")
            println("currentBuildNumber = ${currentBuild}")
            //trigerring Job
              sh  "curl -X POST ${urlPrefix}/buildWithParameters?'ENVIRONMENT=${ENVIRONMENTparam}&SMOKE_SERVER=${SMOKE_SERVERparam}' ${auth}"
	sleep 10


          while (true)
          {

            println("currentBuildNumber = ${currentBuild}")
	     	sh "set +x"
		currentBuildJson =sh(script: "curl -s '${urlPrefix}/${currentBuild}/api/json?pretty=true' ${auth}", returnStdout: true)

		Map jsonContent = (Map) new JsonSlurper().parseText(currentBuildJson)
		 status = jsonContent.get("result")
		println("Status = ${status}")
                  
		if(status == "SUCCESS") {
                print "Smoke Test Passed"
                break
                }
		else if ( status == null ) {
		echo "Still Building"
		}

              else {

                print "Smoke Test Failed"
              	sh 'exit 1'
		}
		
   
	 

          }

       }



node('master') {
	
	stage ("Stage L3") {
	print "Inside Next Stage"
	}

	stage ("Invoke in Smoke Environment")
	  	{
		 ENVIRONMENT1 = env.ENVIRONMENT1
		 SMOKE_SERVER1 = env.SMOKE_SERVER
		invokeSmoke(ENVIRONMENT1,SMOKE_SERVER)
		}
	stage ("Next Stage") {
		print "Inside Next Stage"
		}
		
	stage ("Invoke Smoke in L2 Environment")
	  	{
		 ENVIRONMENT2 = env.ENVIRONMENT2
		 SMOKE_SERVER2 = env.SMOKE_SERVER
		invokeSmoke(ENVIRONMENT2,SMOKE_SERVER)
		}
	stage ("Next Stage") {
		print "Inside Next Stage"
		}		
		  
}
