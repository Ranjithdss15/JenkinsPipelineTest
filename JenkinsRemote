node('master') {

	stage ("Invoke Pipeline")
	  {
		def jenkinsURL = "35.168.32.83:8080"
		def jobName = "getBuildNumber"
		def user = "admin"
		def jenkinsToken = "11913b5a828895141297ffbb5fca801565"

		def previousBuild = sh(script: "curl -s http://${jenkinsURL}/job/{jobName}/lastBuild/buildNumber --user ${user}:${jenkinsToken}", returnStdout: true).trim() as Integer
		println("previousBuild = ${previousBuild}")
		def currentBuildTest = previousBuild + 1
		println("currentBuildTest = ${currentBuildTest}")
		//trigerring Job
	   	sh  "curl -X POST http://${jenkinsURL}/job/{jobName}/buildWithParameters?variable1=asd,variable2=das --user ${user}:${jenkinsToken}"
	    
	        echo "Running Next Stage"
	        def currentBuild = sh(script: "curl -s http://35.168.32.83:8080/job/getBuildNumber/lastBuild/buildNumber --user ${user}:${jenkinsToken}", returnStdout: true).trim() as Integer
	        def lastsuccesfullbuild = sh(script: "curl -s http://35.168.32.83:8080/job/getBuildNumber/lastSuccessfulBuild/buildNumber --user ${user}:${jenkinsToken}", returnStdout: true).trim() as Integer
	        println("currentBuild = ${currentBuild}")
       	        println("lastsuccesfullbuild = ${lastsuccesfullbuild}")

	

	while (true)
	{
		def getSucccessfulBuild = sh(script: "curl -s http://35.168.32.83:8080/job/getBuildNumber/lastSuccessfulBuild/buildNumber --user admin:11913b5a828895141297ffbb5fca801565", returnStdout: true).trim() as Integer
		def getFailedBuild = sh(script: "curl -s http://35.168.32.83:8080/job/getBuildNumber/lastFailedBuild/buildNumber --user admin:11913b5a828895141297ffbb5fca801565", returnStdout: true).trim() as Integer
		println("currentBuildTest = ${currentBuildTest}")
		println("getSucccessfulBuild = ${getSucccessfulBuild}")
	  	println("getFailedBuild = ${getFailedBuild}")
		if(currentBuildTest == getSucccessfulBuild) {
			print "inside if"
			println("currentBuildTest = ${currentBuildTest}")
			println("getSucccessfulBuild = ${getSucccessfulBuild}")
			println("getFailedBuild = ${getFailedBuild}")
			print "Smoke Test Passed"
			break
			}
		else if (currentBuildTest == getFailedBuild)
		{
			print "inside else"
			println("currentBuildTest = ${currentBuildTest}")
			println("getSucccessfulBuild = ${getSucccessfulBuild}")
			println("getFailedBuild = ${getFailedBuild}")
			print "Smoke Test Failed"
			sh 'exit 1'
		}
		
	}


	}
	stage ("Next Stage") {
	print "Inside Next Stage"
	}
		  
}
