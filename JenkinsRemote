node('master') {

	stage ("Invoke Pipeline")
	  {
		def jenkinsURL = "35.168.32.83:8080"
		def jobName = "getBuildNumber"
		def user = "admin"
		def jenkinsToken = "11913b5a828895141297ffbb5fca801565"
		def variable1 = "testVar1"
		def variable2 = "test2"
		def variable3 = "fromvariable3"

		def previousBuild = sh(script: "curl -s http://${jenkinsURL}/job/${jobName}/lastBuild/buildNumber --user ${user}:${jenkinsToken}", returnStdout: true).trim() as Integer
		println("previousBuildNumber = ${previousBuild}")
		def currentBuild = previousBuild + 1
		println("currentBuildNumber = ${currentBuild}")
		//trigerring Job
	   	sh  "curl -X POST http://${jenkinsURL}/job/${jobName}/buildWithParameters?'variable1=${variable1}&variable_2=${variable2}&variable3=${variable3}' --user ${user}:${jenkinsToken}"
			

	while (true)
	{
		def getSuccessfulBuild = sh(script: "curl -s http://${jenkinsURL}/job/${jobName}/lastSuccessfulBuild/buildNumber --user ${user}:${jenkinsToken}", returnStdout: true).trim() as Integer
		def getFailedBuild = sh(script: "curl -s http://${jenkinsURL}/job/${jobName}/lastFailedBuild/buildNumber --user ${user}:${jenkinsToken}", returnStdout: true).trim() as Integer
		def getCompletedBuild = sh(script: "curl -s http://${jenkinsURL}/job/${jobName}/lastCompletedBuild/buildNumber --user ${user}:${jenkinsToken}", returnStdout: true).trim() as Integer
		def getUnsuccessfulBuild = sh(script: "curl -s http://${jenkinsURL}/job/${jobName}/lastUnsuccessfulBuild/buildNumber --user ${user}:${jenkinsToken}", returnStdout: true).trim() as Integer
		def getStableBuild = sh(script: "curl -s http://${jenkinsURL}/job/${jobName}/lastStableBuild/buildNumber --user ${user}:${jenkinsToken}", returnStdout: true).trim() as Integer
		//println("currentBuild = ${currentBuild}")
		//println("getSuccessfulBuild = ${getSuccessfulBuild}")
	  	//println("getFailedBuild = ${getFailedBuild}")
		if (currentBuild == getCompletedBuild)	{
			if(currentBuild == getStableBuild) {
				print "inside if"
				println("currentBuild = ${currentBuild}")
				println("StableBuild = ${getStableBuild}")
				println("lastFailedBuild = ${getFailedBuild}")
				print "Smoke Test Passed"
				break
				}
			else if (currentBuild == getFailedBuild)
			{
				print "inside else"
				println("currentBuild = ${currentBuild}")
				println("lastSuccessfulBuild = ${getSuccessfulBuild}")
				println("lastFailedBuild = ${getFailedBuild}")
				print "Smoke Test Failed"
				sh 'exit 1'
			}
			else if(currentBuild == getUnsuccessfulBuild ) {
				print "inside if"
				println("currentBuild = ${currentBuild}")
				println("UnsuccessfulBuild = ${getUnsuccessfulBuild}")
				println("lastFailedBuild = ${getFailedBuild}")
				print "Smoke Test is Unstable or Aborted"
				sh 'exit 1'
				}
		}
		
	}


	}
	stage ("Next Stage") {
	print "Inside Next Stage"
	}
		  
}
